" =========================================
"     ____  __    __  _____________   __
"    / __ \/ /   / / / / ____/  _/ | / /
"   / /_/ / /   / / / / / __ / //  |/ / 
"  / ____/ /___/ /_/ / /_/ // // /|  /  
" /_/   /_____/\____/\____/___/_/ |_/ 
" =========================================

" Install vim-plug if it is not already installed
if empty(glob('̃/.vim/autoload/plug.vim'))
silent !curl -fLo ̃/.vim/autoload/plug.vim --create-dirs
\ https://raw.github.com/junegunn/vim-plug/master/plug.vim
autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'scrooloose/nerdtree' " File system explorer for tree-like structure
Plug 'sjl/gundo.vim' " Visualize your Vim undo tree
Plug 'tpope/vim-fugitive'  " Git plugin for Vim
Plug 'vim-scripts/ScrollColors' " Switch between the currently installed colorscheme
Plug 'flazz/vim-colorschemes' " Try various colorscheme
Plug 'vim-airline/vim-airline' " Status line for Vim
Plug 'vim-airline/vim-airline-themes' " List possible colorscheme line for Vim
Plug 'ryanoasis/vim-devicons' " Devicons
Plug 'instant-markdown/vim-instant-markdown' " Markdown file browser
Plug 'preservim/vim-markdown' " Syntax highlighting, matching rules and mappings for the original Markdown and extensions
Plug 'lervag/vimtex' " Plugin for Tex
Plug 'thinca/vim-quickrun' " Execute program by :QuickRun
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Plugin for Language Server Protocol
Plug 'rust-lang/rust.vim' " Rust file detection, syntax highlighting, formatting, Syntactic integration, and more
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' } " Plugin for Golang
call plug#end()

packloadall
silent! helptags ALL
let g:airline_theme = 'wombat'
set laststatus=2
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
let g:airline_section_c = '%t'
let g:airline_section_x = '%{&filetype}'
let g:airline#extensions#ale#error_symbol = ' '
let g:airline#extensions#ale#warning_symbol = ' '
let g:airline#extensions#default#section_truncate_width = {}
let g:airline#extensions#whitespace#enabled = 1
let g:rustfmt_autosave=1
let g:go_fmt_command = "goimports"
let g:go_def_mapping_enabled = 0
let g:go_fmt_autosave = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1


" =========================================
"     __ __ ________  __   __  ______    ____  ____  _____   ________
"    / //_// ____/\ \/ /  /  |/  /   |  / __ \/ __ \/  _/ | / / ____/
"   / ,<  / __/    \  /  / /|_/ / /| | / /_/ / /_/ // //  |/ / / __
"  / /| |/ /___    / /  / /  / / ___ |/ ____/ ____// // /|  / /_/ /
" /_/ |_/_____/   /_/  /_/  /_/_/  |_/_/   /_/   /___/_/ |_/\____/
" =========================================

let mapleader = "\<space>"

noremap <leader>w :w<cr>
noremap <leader>n :NERDTree<cr>
noremap <leader>bp :bprev<cr>
noremap <leader>bn :bnext<cr>

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" GoTo code navigation.
nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gy <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)


" =========================================
"    _____________   ____________  ___    __ 
"   / ____/ ____/ | / / ____/ __ \/   |  / / 
"  / / __/ __/ /  |/ / __/ / /_/ / /| | / /  
" / /_/ / /___/ /|  / /___/ _, _/ ___ |/ /___
" \____/_____/_/ |_/_____/_/ |_/_/  |_/_____/
" =========================================

syntax on
filetype plugin indent on
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set backspace=2
colorscheme mustang " Related to colorschemes

set noswapfile
set autoread

" Enable persistent undo for all files
set undofile
if !isdirectory(expand("$HOME/.vim/undodir"))
    call mkdir(expand("$HOME/.vim/undodir"), "p")
endif
set undodir=$HOME/.vim/undodir

set updatetime=300
set number
set wildmenu
set hlsearch
set linebreak
set display+=lastline
set laststatus=2
set cursorline
set clipboard=unnamed
set hidden
set belloff=all
set noerrorbells

autocmd QuickFixCmdPost *grep* cwindow
